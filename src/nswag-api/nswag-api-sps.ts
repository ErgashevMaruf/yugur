//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ILangClient {
    langToJSON(lang: string | null): Observable<string>;
    fromJsonFileToDB(lang: string | null): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class LangClient implements ILangClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    langToJSON(lang: string | null): Observable<string> {
        let url_ = this.baseUrl + "/api/sps/Lang/LangToJSON/{lang}";
        if (lang === undefined || lang === null)
            throw new Error("The parameter 'lang' must be defined.");
        url_ = url_.replace("{lang}", encodeURIComponent("" + lang));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLangToJSON(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLangToJSON(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processLangToJSON(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    fromJsonFileToDB(lang: string | null): Observable<number> {
        let url_ = this.baseUrl + "/api/sps/Lang/FromJsonFileToDB/{lang}";
        if (lang === undefined || lang === null)
            throw new Error("The parameter 'lang' must be defined.");
        url_ = url_.replace("{lang}", encodeURIComponent("" + lang));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFromJsonFileToDB(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFromJsonFileToDB(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processFromJsonFileToDB(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISelectItemClient {
    getSelectItems(tableName: string | null): Observable<SelectItem[]>;
    getSelectItemsByRoot(tableName: string | null, rootId: string | null): Observable<SelectItem[]>;
    getSelectItemsByCode(tableName: string | null, codeId: string | null): Observable<SelectItem[]>;
}

@Injectable({
    providedIn: 'root'
})
export class SelectItemClient implements ISelectItemClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getSelectItems(tableName: string | null): Observable<SelectItem[]> {
        let url_ = this.baseUrl + "/api/sps/SelectItem/GetSelectItems/{tableName}";
        if (tableName === undefined || tableName === null)
            throw new Error("The parameter 'tableName' must be defined.");
        url_ = url_.replace("{tableName}", encodeURIComponent("" + tableName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSelectItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSelectItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectItem[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectItem[]>;
        }));
    }

    protected processGetSelectItems(response: HttpResponseBase): Observable<SelectItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectItem.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSelectItemsByRoot(tableName: string | null, rootId: string | null): Observable<SelectItem[]> {
        let url_ = this.baseUrl + "/api/sps/SelectItem/GetSelectItemsByRoot/{tableName}/{rootId}";
        if (tableName === undefined || tableName === null)
            throw new Error("The parameter 'tableName' must be defined.");
        url_ = url_.replace("{tableName}", encodeURIComponent("" + tableName));
        if (rootId === undefined || rootId === null)
            throw new Error("The parameter 'rootId' must be defined.");
        url_ = url_.replace("{rootId}", encodeURIComponent("" + rootId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSelectItemsByRoot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSelectItemsByRoot(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectItem[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectItem[]>;
        }));
    }

    protected processGetSelectItemsByRoot(response: HttpResponseBase): Observable<SelectItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectItem.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSelectItemsByCode(tableName: string | null, codeId: string | null): Observable<SelectItem[]> {
        let url_ = this.baseUrl + "/api/sps/SelectItem/GetSelectItemsByCode/{tableName}/{codeId}";
        if (tableName === undefined || tableName === null)
            throw new Error("The parameter 'tableName' must be defined.");
        url_ = url_.replace("{tableName}", encodeURIComponent("" + tableName));
        if (codeId === undefined || codeId === null)
            throw new Error("The parameter 'codeId' must be defined.");
        url_ = url_.replace("{codeId}", encodeURIComponent("" + codeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSelectItemsByCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSelectItemsByCode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectItem[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectItem[]>;
        }));
    }

    protected processGetSelectItemsByCode(response: HttpResponseBase): Observable<SelectItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectItem.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISPClient {
    spItemsList(tableName: string | null, uTData: TableMetaData): Observable<QueryResultOfBaseSPViewModel>;
    createNewTableSPS(tableName: string | null): Observable<number>;
    addUpdate(tableName: string | null, model: SPUpdateModel): Observable<FileResponse | null>;
    getSpById(tableName: string | null, id: number): Observable<BaseSPEntity>;
    getSpByIds(tableName: string | null, ids: number[]): Observable<SPSelectModel[]>;
    getAllRaceDistances(distance: string | null | undefined): Observable<SPSelectModel[]>;
}

@Injectable({
    providedIn: 'root'
})
export class SPClient implements ISPClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    spItemsList(tableName: string | null, uTData: TableMetaData): Observable<QueryResultOfBaseSPViewModel> {
        let url_ = this.baseUrl + "/api/sps/SP/SpItemsList/{tableName}";
        if (tableName === undefined || tableName === null)
            throw new Error("The parameter 'tableName' must be defined.");
        url_ = url_.replace("{tableName}", encodeURIComponent("" + tableName));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(uTData);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSpItemsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSpItemsList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QueryResultOfBaseSPViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QueryResultOfBaseSPViewModel>;
        }));
    }

    protected processSpItemsList(response: HttpResponseBase): Observable<QueryResultOfBaseSPViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QueryResultOfBaseSPViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createNewTableSPS(tableName: string | null): Observable<number> {
        let url_ = this.baseUrl + "/api/sps/SP/CreateNewTableSPS/{tableName}";
        if (tableName === undefined || tableName === null)
            throw new Error("The parameter 'tableName' must be defined.");
        url_ = url_.replace("{tableName}", encodeURIComponent("" + tableName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateNewTableSPS(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateNewTableSPS(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateNewTableSPS(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addUpdate(tableName: string | null, model: SPUpdateModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/sps/SP/AddUpdate/{tableName}";
        if (tableName === undefined || tableName === null)
            throw new Error("The parameter 'tableName' must be defined.");
        url_ = url_.replace("{tableName}", encodeURIComponent("" + tableName));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processAddUpdate(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSpById(tableName: string | null, id: number): Observable<BaseSPEntity> {
        let url_ = this.baseUrl + "/api/sps/SP/GetSpById/{tableName}/{id}";
        if (tableName === undefined || tableName === null)
            throw new Error("The parameter 'tableName' must be defined.");
        url_ = url_.replace("{tableName}", encodeURIComponent("" + tableName));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSpById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSpById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BaseSPEntity>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BaseSPEntity>;
        }));
    }

    protected processGetSpById(response: HttpResponseBase): Observable<BaseSPEntity> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseSPEntity.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSpByIds(tableName: string | null, ids: number[]): Observable<SPSelectModel[]> {
        let url_ = this.baseUrl + "/api/sps/SP/GetSpByIds/{tableName}";
        if (tableName === undefined || tableName === null)
            throw new Error("The parameter 'tableName' must be defined.");
        url_ = url_.replace("{tableName}", encodeURIComponent("" + tableName));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSpByIds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSpByIds(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SPSelectModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SPSelectModel[]>;
        }));
    }

    protected processGetSpByIds(response: HttpResponseBase): Observable<SPSelectModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SPSelectModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRaceDistances(distance: string | null | undefined): Observable<SPSelectModel[]> {
        let url_ = this.baseUrl + "/api/sps/SP/GetAllRaceDistances?";
        if (distance !== undefined && distance !== null)
            url_ += "distance=" + encodeURIComponent("" + distance) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRaceDistances(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRaceDistances(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SPSelectModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SPSelectModel[]>;
        }));
    }

    protected processGetAllRaceDistances(response: HttpResponseBase): Observable<SPSelectModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SPSelectModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class SelectItem implements ISelectItem {
    label!: string;
    value!: string;
    dataInt?: number | undefined;
    code?: string | undefined;
    rootCode?: string | undefined;
    dataStr?: string | undefined;
    dataStr2?: string | undefined;
    dateTime?: string | undefined;

    constructor(data?: ISelectItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
            this.dataInt = _data["dataInt"];
            this.code = _data["code"];
            this.rootCode = _data["rootCode"];
            this.dataStr = _data["dataStr"];
            this.dataStr2 = _data["dataStr2"];
            this.dateTime = _data["dateTime"];
        }
    }

    static fromJS(data: any): SelectItem {
        data = typeof data === 'object' ? data : {};
        let result = new SelectItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        data["dataInt"] = this.dataInt;
        data["code"] = this.code;
        data["rootCode"] = this.rootCode;
        data["dataStr"] = this.dataStr;
        data["dataStr2"] = this.dataStr2;
        data["dateTime"] = this.dateTime;
        return data;
    }
}

export interface ISelectItem {
    label: string;
    value: string;
    dataInt?: number | undefined;
    code?: string | undefined;
    rootCode?: string | undefined;
    dataStr?: string | undefined;
    dataStr2?: string | undefined;
    dateTime?: string | undefined;
}

export class QueryResultOfBaseSPViewModel implements IQueryResultOfBaseSPViewModel {
    items!: BaseSPViewModel[];
    totalItems!: number;

    constructor(data?: IQueryResultOfBaseSPViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BaseSPViewModel.fromJS(item));
            }
            this.totalItems = _data["totalItems"];
        }
    }

    static fromJS(data: any): QueryResultOfBaseSPViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new QueryResultOfBaseSPViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalItems"] = this.totalItems;
        return data;
    }
}

export interface IQueryResultOfBaseSPViewModel {
    items: BaseSPViewModel[];
    totalItems: number;
}

export abstract class EntityBase implements IEntityBase {
    id!: number;
    active!: boolean;
    createdBy?: number | undefined;
    createdDate?: Date | undefined;
    lastModifiedBy?: number | undefined;
    lastModifiedDate?: Date | undefined;
    comment?: string | undefined;

    constructor(data?: IEntityBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.active = _data["active"];
            this.createdBy = _data["createdBy"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModifiedDate = _data["lastModifiedDate"] ? new Date(_data["lastModifiedDate"].toString()) : <any>undefined;
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): EntityBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EntityBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["active"] = this.active;
        data["createdBy"] = this.createdBy;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : <any>undefined;
        data["comment"] = this.comment;
        return data;
    }
}

export interface IEntityBase {
    id: number;
    active: boolean;
    createdBy?: number | undefined;
    createdDate?: Date | undefined;
    lastModifiedBy?: number | undefined;
    lastModifiedDate?: Date | undefined;
    comment?: string | undefined;
}

export class BaseSPEntity extends EntityBase implements IBaseSPEntity {
    nameRu!: string;
    nameUz!: string;
    nameCyr?: string | undefined;
    nameKar?: string | undefined;
    code?: string | undefined;
    spRootCode?: string | undefined;
    dateTimeField?: Date | undefined;
    capacity?: number | undefined;
    comment?: string | undefined;
    categoryTypeId?: number | undefined;
    groupId?: number | undefined;
    regionId?: number | undefined;
    districtId?: number | undefined;
    belongCivilService?: number | undefined;

    constructor(data?: IBaseSPEntity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.nameRu = _data["nameRu"];
            this.nameUz = _data["nameUz"];
            this.nameCyr = _data["nameCyr"];
            this.nameKar = _data["nameKar"];
            this.code = _data["code"];
            this.spRootCode = _data["spRootCode"];
            this.dateTimeField = _data["dateTimeField"] ? new Date(_data["dateTimeField"].toString()) : <any>undefined;
            this.capacity = _data["capacity"];
            this.comment = _data["comment"];
            this.categoryTypeId = _data["categoryTypeId"];
            this.groupId = _data["groupId"];
            this.regionId = _data["regionId"];
            this.districtId = _data["districtId"];
            this.belongCivilService = _data["belongCivilService"];
        }
    }

    static override fromJS(data: any): BaseSPEntity {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSPEntity();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nameRu"] = this.nameRu;
        data["nameUz"] = this.nameUz;
        data["nameCyr"] = this.nameCyr;
        data["nameKar"] = this.nameKar;
        data["code"] = this.code;
        data["spRootCode"] = this.spRootCode;
        data["dateTimeField"] = this.dateTimeField ? this.dateTimeField.toISOString() : <any>undefined;
        data["capacity"] = this.capacity;
        data["comment"] = this.comment;
        data["categoryTypeId"] = this.categoryTypeId;
        data["groupId"] = this.groupId;
        data["regionId"] = this.regionId;
        data["districtId"] = this.districtId;
        data["belongCivilService"] = this.belongCivilService;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseSPEntity extends IEntityBase {
    nameRu: string;
    nameUz: string;
    nameCyr?: string | undefined;
    nameKar?: string | undefined;
    code?: string | undefined;
    spRootCode?: string | undefined;
    dateTimeField?: Date | undefined;
    capacity?: number | undefined;
    comment?: string | undefined;
    categoryTypeId?: number | undefined;
    groupId?: number | undefined;
    regionId?: number | undefined;
    districtId?: number | undefined;
    belongCivilService?: number | undefined;
}

export class BaseSPViewModel extends BaseSPEntity implements IBaseSPViewModel {
    createDateStr!: string;
    lastModifiedDateStr!: string;
    createdByStr!: string;
    lastModifiedByStr!: string;

    constructor(data?: IBaseSPViewModel) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createDateStr = _data["createDateStr"];
            this.lastModifiedDateStr = _data["lastModifiedDateStr"];
            this.createdByStr = _data["createdByStr"];
            this.lastModifiedByStr = _data["lastModifiedByStr"];
        }
    }

    static override fromJS(data: any): BaseSPViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSPViewModel();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createDateStr"] = this.createDateStr;
        data["lastModifiedDateStr"] = this.lastModifiedDateStr;
        data["createdByStr"] = this.createdByStr;
        data["lastModifiedByStr"] = this.lastModifiedByStr;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseSPViewModel extends IBaseSPEntity {
    createDateStr: string;
    lastModifiedDateStr: string;
    createdByStr: string;
    lastModifiedByStr: string;
}

export class TableMetaData implements ITableMetaData {
    filters?: string | undefined;
    first!: number;
    rows!: number;
    sortField?: string | undefined;
    sortOrder!: number;
    filterHandle?: string | undefined;
    tagHandle?: string | undefined;
    globalFilter?: string | undefined;

    constructor(data?: ITableMetaData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filters = _data["filters"];
            this.first = _data["first"];
            this.rows = _data["rows"];
            this.sortField = _data["sortField"];
            this.sortOrder = _data["sortOrder"];
            this.filterHandle = _data["filterHandle"];
            this.tagHandle = _data["tagHandle"];
            this.globalFilter = _data["globalFilter"];
        }
    }

    static fromJS(data: any): TableMetaData {
        data = typeof data === 'object' ? data : {};
        let result = new TableMetaData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filters"] = this.filters;
        data["first"] = this.first;
        data["rows"] = this.rows;
        data["sortField"] = this.sortField;
        data["sortOrder"] = this.sortOrder;
        data["filterHandle"] = this.filterHandle;
        data["tagHandle"] = this.tagHandle;
        data["globalFilter"] = this.globalFilter;
        return data;
    }
}

export interface ITableMetaData {
    filters?: string | undefined;
    first: number;
    rows: number;
    sortField?: string | undefined;
    sortOrder: number;
    filterHandle?: string | undefined;
    tagHandle?: string | undefined;
    globalFilter?: string | undefined;
}

export class SPUpdateModel implements ISPUpdateModel {
    id!: number;
    nameRu!: string;
    nameUz!: string;
    nameCyr?: string | undefined;
    nameKar?: string | undefined;
    code?: string | undefined;
    spRootCode?: string | undefined;
    comment?: string | undefined;
    tin?: string | undefined;
    active!: boolean;
    capacity?: number | undefined;
    dateTimeField?: Date | undefined;
    categoryTypeId?: number | undefined;
    groupId?: number | undefined;
    regionId?: number | undefined;
    districtId?: number | undefined;
    belongCivilService?: number | undefined;

    constructor(data?: ISPUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nameRu = _data["nameRu"];
            this.nameUz = _data["nameUz"];
            this.nameCyr = _data["nameCyr"];
            this.nameKar = _data["nameKar"];
            this.code = _data["code"];
            this.spRootCode = _data["spRootCode"];
            this.comment = _data["comment"];
            this.tin = _data["tin"];
            this.active = _data["active"];
            this.capacity = _data["capacity"];
            this.dateTimeField = _data["dateTimeField"] ? new Date(_data["dateTimeField"].toString()) : <any>undefined;
            this.categoryTypeId = _data["categoryTypeId"];
            this.groupId = _data["groupId"];
            this.regionId = _data["regionId"];
            this.districtId = _data["districtId"];
            this.belongCivilService = _data["belongCivilService"];
        }
    }

    static fromJS(data: any): SPUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SPUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nameRu"] = this.nameRu;
        data["nameUz"] = this.nameUz;
        data["nameCyr"] = this.nameCyr;
        data["nameKar"] = this.nameKar;
        data["code"] = this.code;
        data["spRootCode"] = this.spRootCode;
        data["comment"] = this.comment;
        data["tin"] = this.tin;
        data["active"] = this.active;
        data["capacity"] = this.capacity;
        data["dateTimeField"] = this.dateTimeField ? this.dateTimeField.toISOString() : <any>undefined;
        data["categoryTypeId"] = this.categoryTypeId;
        data["groupId"] = this.groupId;
        data["regionId"] = this.regionId;
        data["districtId"] = this.districtId;
        data["belongCivilService"] = this.belongCivilService;
        return data;
    }
}

export interface ISPUpdateModel {
    id: number;
    nameRu: string;
    nameUz: string;
    nameCyr?: string | undefined;
    nameKar?: string | undefined;
    code?: string | undefined;
    spRootCode?: string | undefined;
    comment?: string | undefined;
    tin?: string | undefined;
    active: boolean;
    capacity?: number | undefined;
    dateTimeField?: Date | undefined;
    categoryTypeId?: number | undefined;
    groupId?: number | undefined;
    regionId?: number | undefined;
    districtId?: number | undefined;
    belongCivilService?: number | undefined;
}

export class SPSelectModel implements ISPSelectModel {
    id!: number;
    nameRu?: string | undefined;
    nameUz?: string | undefined;
    nameCyr?: string | undefined;
    nameKar?: string | undefined;
    code?: string | undefined;

    constructor(data?: ISPSelectModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nameRu = _data["nameRu"];
            this.nameUz = _data["nameUz"];
            this.nameCyr = _data["nameCyr"];
            this.nameKar = _data["nameKar"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): SPSelectModel {
        data = typeof data === 'object' ? data : {};
        let result = new SPSelectModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nameRu"] = this.nameRu;
        data["nameUz"] = this.nameUz;
        data["nameCyr"] = this.nameCyr;
        data["nameKar"] = this.nameKar;
        data["code"] = this.code;
        return data;
    }
}

export interface ISPSelectModel {
    id: number;
    nameRu?: string | undefined;
    nameUz?: string | undefined;
    nameCyr?: string | undefined;
    nameKar?: string | undefined;
    code?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}